<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Koolistov]]></title>
  <link href="http://www.koolistov.net/atom.xml" rel="self"/>
  <link href="http://www.koolistov.net/"/>
  <updated>2012-01-10T00:28:26+08:00</updated>
  <id>http://www.koolistov.net/</id>
  <author>
    <name><![CDATA[Johan Kool]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Breaking the Silence]]></title>
    <link href="http://www.koolistov.net/blog/2011/12/19/breaking-the-silence/"/>
    <updated>2011-12-19T13:59:00+08:00</updated>
    <id>http://www.koolistov.net/blog/2011/12/19/breaking-the-silence</id>
    <content type="html"><![CDATA[<p>No false illusions, there is no one besides me who noticed the silence on this blog during the last couple of weeks. It was everything but silent behind the curtains however. Mostly rattling of my keyboard…</p>

<p>I have been working hard on one major iPad project together with the awesome people at <a href="http://www.egeniq.com/">Egeniq</a>. My contribution was a significant part of the iPad app coding, but there are way more people involved for design and backend development, and not just at Egeniq either. Last Friday I had the honor of doing the last code review for build 1.0 of the app, and by virtue of approving the merge on GitHub, setting in motion the final build. <a href="https://twitter.com/ijansch/status/147726912578531328">Whoot</a>!</p>

<!--more-->


<p>The opening of the curtains is planned for January of next year and shouldn&#8217;t go unnoticed for the Dutch, the target market. There are plans for TV commercials announcing the app, as well as outdoor advertising. Wicked!</p>

<h3>Git, GitHub and code reviews</h3>

<p>For me this was the first big project using git. Git combined with GitHub really is a winner. The amount of time I spent on fighting with SCM was significantly lower than when using Subversion. There were some disagreements between me and git, but we worked it out.</p>

<p>Something that was actually very neat was the strict rule that code was to be reviewed before it got merged into the main repository. If you know it&#8217;s not just you reading the code it makes that you&#8217;d doubly want to commit great code. That only works if the code reviewers have a great competency level too, which luckily was the case.</p>

<p>We worked from our own forks, then did pull requests via GitHub. Their interface is great and it is generally quite easy to spot issues. Some things did slip through code review though, mainly bugs where the diff snippets in GitHub didn&#8217;t provide enough context for the reviewer to spot the problem. GitHub lets you click through to the full file, but as this lacks highlighting of the changes, it does little in helping to spot problems. Some Ajax-y way to load more context would be a great enhancement.</p>

<p>One rule that we had for code review was that commented out code was not allowed unless a comment was present explaining the reason. The explanation better be a good one too. This was useful in keeping the code base clean. I have noticed that in earlier projects I have let such commented out code blocks accumulate. Usually it would end up being deleted in the end, or if reinstated not work quite as expected anymore due to changes made elsewhere. This commented out stuff just doesn&#8217;t belong in your code base. And remember, you are using SCM so you can always get back to it if needed anyway.</p>

<h3>Pivotal Tracker</h3>

<p>Another tool we used was <a href="http://www.pivotaltracker.com/">Pivotal Tracker</a>. I am actually quite enthusiastic about this one. Its strength is its simplicity. You break up what needs to be done in small units of work, stories, and these go through the states: started, finished, delivered and then accepted – or rejected if you messed up. Works fine, though there is one state that I would add: blocked. Too often you run into something where you cannot continue with the work due to a missing image file, specification, backend issue, etc. etc. It would help the project managers to more easily spot where the hold ups are if such stories could be marked as blocked.</p>

<h3>Fireworks</h3>

<p>One thing that didn&#8217;t quite go so smoothly was the delivery of artwork. The designers used Adobe Fireworks. Quite the misnomer, as there is not much that really works in it. Not that I have been able to find any software that could sensibly be used as its replacement, but still. The designs were sliced to extract the needed artwork, but with every change to the design the slices came out with different names, so yeah that was fun. Also, it must not be straightforward enough in FireWorks to name slices something sensible, as we ended up with a bunch of very similarly named image files. Luckily there is QuickLook, but this still sucked.</p>

<h3>Third party frameworks</h3>

<p>The client wanted integration with some 3rd party services which provided services such as social media, analytics and mobile advertisements. This meant we had to integrate frameworks developed by these parties into the app. Clearly not all frameworks are created equal. We had some excellent ones that were easy to use, and didn&#8217;t cause any issues. There were some that gave some build warnings, but worked okay otherwise. And then there was the framework that ignored a number of Cocoa conventions and gave us many instability issues.</p>

<p>In my opinion this underlines the importance of not only choosing a service on promised features and pricing, but also needs technical vetting of the provided framework. It only takes one buggy framework to make the whole app prone to crashes. Luckily the respective third party framework developer was responsive and managed to get us an updated framework just in time for our deadline.</p>

<h3>Conclusion</h3>

<p>All together it was a fun project to work on, and I am looking forward to its public release. And now I should get back to work: version 1.1 is going to be even better!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Steve Jobs]]></title>
    <link href="http://www.koolistov.net/blog/2011/10/06/steve-jobs/"/>
    <updated>2011-10-06T23:59:00+08:00</updated>
    <id>http://www.koolistov.net/blog/2011/10/06/steve-jobs</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://www.koolistov.net/images/stevejobs.png" width="353" height="322" title="Steve Jobs" ></p>

<p>It is a sad sad day today. We all knew it was coming. We all knew it was coming sooner than we were praying for. Steve Jobs&#8217; passing away is still a painful stab in the heart. He was crazy enough to think he could change the world, and damn it, did he ever!</p>

<p>It must have been somewhere around 1991 that I for the first time got to play with a Macintosh. What got me right away was the passion that so obviously had been put into building it, into making it a joy to use, easy to use. It was not about typing &#8216;magic&#8217; commands at a blinking cursor, it was about getting things done, and having a good time doing so too!</p>

<p>Today I am typing this on an iMac with possibilities I could not dream of in 1991. Yet it dwarfs the potential of the iPhone and iPad on my desk. Today is the future. And he is the one who made it all possible!</p>

<p>It is a dream come true for me that today I earn my living developing for Mac and iOS. And it is all made possible by the drive of Steve for the very best. He did not do it all by himself, not even close, but he did manage to motivate and push many, many talented people to reach beyond what they could imagine achievable.</p>

<p>I have not met him or worked with him. I have only seen his work from the sideline. But yet, it feels like he was my motivator too. To tell me good is not good enough, to always aim higher. I like to think some of his passion rubbed off on me.</p>

<p>It is a sad sad day today. Coping with the mourning is though. Humor is one of the few mechanism we have to deal with it, so I&#8217;ll end this with a lighter note:</p>

<blockquote><p>Blessed are those who die after Steve Jobs for them awaits the perfect heaven. He is rethinking the whole concept with God at this moment.</p></blockquote>

<p>Thank you Steve! You are missed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Right Path to URL Parameters]]></title>
    <link href="http://www.koolistov.net/blog/2011/10/02/right-path-to-url-parameters/"/>
    <updated>2011-10-02T00:40:00+08:00</updated>
    <id>http://www.koolistov.net/blog/2011/10/02/right-path-to-url-parameters</id>
    <content type="html"><![CDATA[<p>It is very common to have to construct URLs in iOS apps. Unfortunately there is no such things as <code>NSMutableURL</code>, so we need to come up with our own solution. Most developers seem to take a very pragmatic approach to this. Basically, you take a base URL, append a path and/or parameters to it, and go about your business. Almost, if not all, code I have seen do this make assumptions about the base URL: for example, no query or fragment present in the URL. Sometimes even relying on the other parts of the app always providing text that is safe to use in an URL. It can be quite a safe assumption that this is safe within your app, but I wanted a solution that is safe to use no matter what the base URL looked like, or what text was provided for the parameters.</p>

<!--more-->


<h3>URL Building Blocks</h3>

<p>Let&#8217;s have a quick look at how a URL is constructed. The various parts of an URL are:</p>

<pre><code>scheme://username:password@domain:port/path?query#fragment
</code></pre>

<p>The pragmatic approach works well if the base URL does not contain a path, query and fragment. The presence of a path is usually not a problem, it gets trickier when a query is already present, and most solutions definitely fail when a fragment is present.</p>

<p>The code provided below takes the presence of path, query and/or fragment into account. Don&#8217;t just take my word for it, you can run the provided unit test to ensure it does it right.</p>

<h3>Path</h3>

<p>To replace a path complete, use <code>- (NSURL *)URLByReplacingPathWithPath:(NSString *)path</code>. Alternatively, use <code>- (NSURL *)URLByAppendingPathWithRelativePath:(NSString *)path</code> if you want to append a relative path. This also allows to you walk up the path using for example <code>../foo</code>. The path will get simplified if possible.</p>

<h3>Parameter</h3>

<p>The most effective way to add parameters is to use <code>- (NSURL *)URLByAppendingParameters:(NSDictionary *)parameters</code>. The dictionary is expected to contain <code>NSString</code>s as keys. The corresponding values may be either <code>NSString</code>s or should respond to the method <code>- (NSString *)stringValue</code>, otherwise the value will default to  <code>- (NSString *)description</code>. Both keys and values will get URL escaped.</p>

<p>It is valid in an URL to have a parameter name appear multiple times, unlike it is for keys in <code>NSDictionary</code>. You can work around this by calling the method <code>- (NSURL *)URLByAppendingParameterName:(NSString *)parameter value:(id)value</code> multiple times with the same parameter name.</p>

<h3>Code</h3>

<p>The code is available as a <a href="https://gist.github.com/1256354">gist on GitHub</a>. The license for the code is a simple BSD license. You don&#8217;t need to attribute me or Koolistov in your app (although appreciated if you do), but you need to leave the copyright notice intact on the source files.</p>

<div><script src='https://gist.github.com/1256354.js?file='></script>
<noscript><pre><code>//
//  NSURL+PathParameters.h
//
//  Created by Johan Kool on 27/9/2011.
//  Copyright 2011 Koolistov Pte. Ltd. All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without modification, are 
//  permitted provided that the following conditions are met:
//
//  * Redistributions of source code must retain the above copyright notice, this list of 
//    conditions and the following disclaimer.
//  * Neither the name of KOOLISTOV PTE. LTD. nor the names of its contributors may be used to 
//    endorse or promote products derived from this software without specific prior written 
//    permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY 
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
//  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
//  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
//  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
//  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//


#import &lt;Foundation/Foundation.h&gt;

@interface NSURL (PathParameters)

- (NSURL *)URLByReplacingPathWithPath:(NSString *)path;
- (NSURL *)URLByAppendingPathWithRelativePath:(NSString *)path;
- (NSURL *)URLByAppendingParameters:(NSDictionary *)parameters;
- (NSURL *)URLByAppendingParameterName:(NSString *)parameter value:(id)value;

@end
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Antiquated Icons and Junk Drawers]]></title>
    <link href="http://www.koolistov.net/blog/2011/09/24/antiquated-icons-and-junk-drawers/"/>
    <updated>2011-09-24T21:16:00+08:00</updated>
    <id>http://www.koolistov.net/blog/2011/09/24/antiquated-icons-and-junk-drawers</id>
    <content type="html"><![CDATA[<p>One of the perks of having a newborn in the house, besides dirty diapers and frequent feedings, is that you only get up-to-date on some news later than normal. During the last weeks I had been hearing about Windows 8 and the new Metro style apps Microsoft introduced, but it wasn&#8217;t until this morning that I found some time to look at one of the introduction videos.</p>

<p>Actually, I have to congratulate Microsoft on this one. Like mine (yes, not a subjective opinion, but who cares) theirs is a pretty baby too! A fresh and unique approach is something we don&#8217;t often see coming out of Redmond. The tiles, the side-by-side mode, sharing between apps are all great features to have. Also smaller things like being able to swipe between pages whilst dragging is a fun new gesture.</p>

<!--more-->


<h3>My Desktop is Not a Phone</h3>

<p><span class='pullquote-right' data-pullquote='Microsoft would have done better to introduce Metro for just touch devices.'>
But it wouldn&#8217;t be Microsoft if there weren&#8217;t a number of rather baffling decisions. I can see Metro style apps work beautifully on touch devices like phones and, in Microsofts parlance, slates. On desktop and laptop computers without touch these apps are woofully out of place. As a iOS developer I have some experience here, as I often debug apps running in the iOS Simulator. For debugging that works great, but I&#8217;d never want to use an app that way on my desktop all day long. Some gestures are nearly impossible, or even completely impossible. Think pinching, rotating, or anything involving more than one finger. Yet, Metro apps are expected to be able to be driven by mouse and keyboard too. If developers have to take that usage method into account, they are targeting the lowest common denominator. You don&#8217;t want that.</p>

<p>When Apple announced that with Lion the new features and ideas learned from iOS would make it &#8216;back to the Mac&#8217;, they were actually quite conservative in what they brought along. The current desktop metaphor is still a strong one, and it works wonderfully well with a keyboard and mouse (or trackpad, or both). Apple didn&#8217;t put a touchscreen in their desktops and laptops, nor do the let you run iOS apps on the Mac. For a good reason: it doesn&#8217;t fit that usage type. Microsoft would have done better to introduce Metro for just touch devices. It would have been a great time also to drop the &#8220;Windows&#8221; name, which in a chromeless UI as Metro is now just a plain silly name. I think Microsoft also underestimates the negative association many people make when they hear the name &#8220;Windows&#8221;.</p>

<p>Today&#8217;s trend is towards touch. Microsoft correctly saw that. The desktop computer as we know it is here to stay though, that is, with keyboard and mouse. I see desktops and touch devices getting more and more acquainted with each other, but I doubt they&#8217;ll ever become one and the same. Just as you don&#8217;t connect a mouse to your touch device, bringing touch to your desktop computer won&#8217;t do the trick either.
</span></p>

<h3>Apple, er&#8230; Window Push Notifications</h3>

<p>But back to Metro, because on touch devices it looks rather promising. I had a good chuckle when they started talking about push notifications. They call this service &#8220;Windows Push Notifications Service&#8221;, abbreviated as &#8220;WNS&#8221;, I guess abbreviating it as &#8220;WPNS&#8221; was to close to &#8220;APNS&#8221; as Apple&#8217;s push notification service is known. These days having push notifications in your OS is definitely a must. It took Apple until iOS 5 before it finally introduced a notification center. I don&#8217;t think I break any NDA rules if I say that I really love having this feature on my iPhone. Microsoft has decided otherwise: &#8220;That,&#8221; they say, &#8220;is not a notification center, but a junk drawer. All those notifications pile up there, and you have to go clean them up or eventually your drawer will overflow with junk.&#8221; I wonder how long it will take them to make a full 180 and eat their words on this.</p>

<h3>App Branding</h3>

<p><span class='pullquote-right' data-pullquote='Using an icon is now considered &#8220;antiquated&#8221; by Microsoft.'>
Using an icon is now considered &#8220;antiquated&#8221; by Microsoft. Funny language to hear from the masters of backward compatibility to the extreme. Although I like the general idea of the live tiles over icons, there is one major concern that I have here. It waters down for the user what is your app and what is the OS. This is further emphasized by the use of templates for the live tiles. The icon, before the most important branding an app had, is now a generic tile. Also within the apps Microsoft wants developers to use Microsofts templates and Microsofts typography and Microsofts layout. If the non-geek user already has trouble naming their web browser, in Metro they will have an even harder time identifying which app they are using if they even recognize it as such. I think that as Metro app developer it will be a big challenge to gain name recognition for your Metro app.
</span></p>

<h3>Competition Welcome</h3>

<p>Although there is a lot of new stuff, it is evident Microsoft took a good look at Apple&#8217;s iOS. I don&#8217;t doubt the reverse will happen too, and would welcome side-by-side apps in iOS 6. Also the sharing services are great additions and a good feature to have in a mobile OS. It is good that Apple is facing some more competition here now. Until now competition was not too impressive: Android is still playing catchup, WebOS is being kicked around by CEOs and Blackberry&#8230; not sure why I even mention them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Fresh New Website]]></title>
    <link href="http://www.koolistov.net/blog/2011/09/17/a-fresh-new-website/"/>
    <updated>2011-09-17T13:00:00+08:00</updated>
    <id>http://www.koolistov.net/blog/2011/09/17/a-fresh-new-website</id>
    <content type="html"><![CDATA[<p>A fresh new website for Koolistov is finally here. As Koolistov recently incorporated in Singapore as a private limited company, an update to its website was more than overdue. The old started to show its age, and although I applied a somewhat fresher CSS style to it, it still didn&#8217;t feel quite right.</p>

<p>The legendary <a href="http://mattgemmell.com/2011/09/12/blogging-with-octopress/">Matt Gemmell</a> had been feeling the need to freshen up his personal blog recently too, and this is how I got to learn about <a href="http://octopress.org/">Octopress</a>. Octopress is framework based on <a href="https://github.com/mojombo/jekyll">Jekyll</a> created by <a href="http://twitter.com/imathis">Brandon Mathis</a>. It provides you with a great looking, HTML5 based blog. You run it locally on your own computer where it creates a static website which can be hosted anywhere. Despite being static, it actually offers quite a nice number of features by wisely letting established third parties take care of those, such as comments and searching. It&#8217;s quite configurable, and by creating static html you are not getting locked in to one hosting provider. Great stuff!</p>

<!--more-->


<p>Octopress has support for deploying directly to GitHub Pages, or <code>rsync</code>-ing to a plain webserver. However, the previous website of Koolistov was running on <a href="http://code.google.com/appengine/">Google App Engine</a>. There are a few features that I implemented there that are in use by some of my apps, and/or that I would not really want to part with. As it turns out, I can have the best of both worlds: keep my website on Google App Engine, and use Octopress.</p>

<p>The first hurdle though was to get Octopress to run locally. The installation isn&#8217;t particularly difficult but there was one gotcha worth mentioning. The installation instructions assume that you are using the <code>bash</code> shell on Mac OS X. If, like me, you have been using a Mac OS X for longer than you can remember, yours may still be the <code>tcsh</code> shell. Once I did the installation via a temporary <code>bash</code> shell, and also use such a <code>bash</code> shell when working with Octopress, all is fine. Maybe someday I&#8217;ll catch up with the times and change my default shell to <code>bash</code>, but that&#8217;s not for today.</p>

<p>A number of solutions showed up when searching for ways of hosting a static website via Google App Engine. By far the best solution I found made it as easy as putting everything in a folder named <code>static</code> and adding a bunch of handlers to <code>app.yaml</code>. This solution beats others in that it doesn&#8217;t require any processing, and that it can serve up the <code>index.html</code> of a folder when such folder is accessed without resorting to performing redirect to the <code>index.html</code>.</p>

<div><script src='https://gist.github.com/873098.js?file=app.yaml'></script>
<noscript><pre><code>application: you-app-name-here
version: 1
runtime: python
api_version: 1

default_expiration: &quot;30d&quot;

handlers:
- url: /(.*\.(appcache|manifest))
  mime_type: text/cache-manifest
  static_files: static/\1
  upload: static/(.*\.(appcache|manifest))
  expiration: &quot;0m&quot;

- url: /(.*\.atom)
  mime_type: application/atom+xml
  static_files: static/\1
  upload: static/(.*\.atom)
  expiration: &quot;1h&quot;

- url: /(.*\.crx)
  mime_type: application/x-chrome-extension
  static_files: static/\1
  upload: static/(.*\.crx)

- url: /(.*\.css)
  mime_type: text/css
  static_files: static/\1
  upload: static/(.*\.css)

- url: /(.*\.eot)
  mime_type: application/vnd.ms-fontobject
  static_files: static/\1
  upload: static/(.*\.eot)

- url: /(.*\.htc)
  mime_type: text/x-component
  static_files: static/\1
  upload: static/(.*\.htc)

- url: /(.*\.html)
  mime_type: text/html
  static_files: static/\1
  upload: static/(.*\.html)
  expiration: &quot;1h&quot;

- url: /(.*\.ico)
  mime_type: image/x-icon
  static_files: static/\1
  upload: static/(.*\.ico)
  expiration: &quot;7d&quot;

- url: /(.*\.js)
  mime_type: text/javascript
  static_files: static/\1
  upload: static/(.*\.js)

- url: /(.*\.json)
  mime_type: application/json
  static_files: static/\1
  upload: static/(.*\.json)
  expiration: &quot;1h&quot;

- url: /(.*\.m4v)
  mime_type: video/m4v
  static_files: static/\1
  upload: static/(.*\.m4v)

- url: /(.*\.mp4)
  mime_type: video/mp4
  static_files: static/\1
  upload: static/(.*\.mp4)

- url: /(.*\.(ogg|oga))
  mime_type: audio/ogg
  static_files: static/\1
  upload: static/(.*\.(ogg|oga))

- url: /(.*\.ogv)
  mime_type: video/ogg
  static_files: static/\1
  upload: static/(.*\.ogv)

- url: /(.*\.otf)
  mime_type: font/opentype
  static_files: static/\1
  upload: static/(.*\.otf)

- url: /(.*\.rss)
  mime_type: application/rss+xml
  static_files: static/\1
  upload: static/(.*\.rss)
  expiration: &quot;1h&quot;

- url: /(.*\.safariextz)
  mime_type: application/octet-stream
  static_files: static/\1
  upload: static/(.*\.safariextz)

- url: /(.*\.(svg|svgz))
  mime_type: images/svg+xml
  static_files: static/\1
  upload: static/(.*\.(svg|svgz))

- url: /(.*\.swf)
  mime_type: application/x-shockwave-flash
  static_files: static/\1
  upload: static/(.*\.swf)

- url: /(.*\.ttf)
  mime_type: font/truetype
  static_files: static/\1
  upload: static/(.*\.ttf)

- url: /(.*\.txt)
  mime_type: text/plain
  static_files: static/\1
  upload: static/(.*\.txt)

- url: /(.*\.unity3d)
  mime_type: application/vnd.unity
  static_files: static/\1
  upload: static/(.*\.unity3d)

- url: /(.*\.webm)
  mime_type: video/webm
  static_files: static/\1
  upload: static/(.*\.webm)

- url: /(.*\.webp)
  mime_type: image/webp
  static_files: static/\1
  upload: static/(.*\.webp)

- url: /(.*\.woff)
  mime_type: application/x-font-woff
  static_files: static/\1
  upload: static/(.*\.woff)

- url: /(.*\.xml)
  mime_type: application/xml
  static_files: static/\1
  upload: static/(.*\.xml)
  expiration: &quot;1h&quot;

- url: /(.*\.xpi)
  mime_type: application/x-xpinstall
  static_files: static/\1
  upload: static/(.*\.xpi)

# image files
- url: /(.*\.(bmp|gif|ico|jpeg|jpg|png))
  static_files: static/\1
  upload: static/(.*\.(bmp|gif|ico|jpeg|jpg|png))

# audio files
- url: /(.*\.(mid|midi|mp3|wav))
  static_files: static/\1
  upload: static/(.*\.(mid|midi|mp3|wav))  

# windows files
- url: /(.*\.(doc|exe|ppt|rtf|xls))
  static_files: static/\1
  upload: static/(.*\.(doc|exe|ppt|rtf|xls))

# compressed files
- url: /(.*\.(bz2|gz|rar|tar|tgz|zip))
  static_files: static/\1
  upload: static/(.*\.(bz2|gz|rar|tar|tgz|zip))

# index files
- url: /(.+)/
  static_files: static/\1/index.html
  upload: static/(.+)/index.html
  expiration: &quot;15m&quot;

- url: /(.+)
  static_files: static/\1/index.html
  upload: static/(.+)/index.html
  expiration: &quot;15m&quot;

# site root
- url: /
  static_files: static/index.html
  upload: static/index.html
  expiration: &quot;15m&quot;
</code></pre></noscript></div>


<p>Now if only Google App Engine would support naked domain names&#8230; I guess we need to keep something to dream about.</p>
]]></content>
  </entry>
  
</feed>
