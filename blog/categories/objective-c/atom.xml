<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | Koolistov]]></title>
  <link href="http://koolistov.net/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://koolistov.net/"/>
  <updated>2012-03-08T12:11:57+08:00</updated>
  <id>http://koolistov.net/</id>
  <author>
    <name><![CDATA[Johan Kool]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hex Representation of NSData]]></title>
    <link href="http://koolistov.net/blog/2012/02/26/hex-representation-of-nsdata/"/>
    <updated>2012-02-26T23:55:00+08:00</updated>
    <id>http://koolistov.net/blog/2012/02/26/hex-representation-of-nsdata</id>
    <content type="html"><![CDATA[<p>And the last one for today, from bit longer ago, is a category on <code>NSData</code> to get its content as a hex representation. Optionally with spaces and/or capitals. This one is not mine, I only cleaned it up a little, but was <a href="http://stackoverflow.com/a/7520723/60488/">an answer by AliSoftware on Stackoverflow</a>.</p>

<!-- more -->


<p><div><script src='https://gist.github.com/1443455.js?file='></script>
<noscript><pre><code>//
//  NSData+Hex.h
//
//  Based on code by AliSoftware
//  http://stackoverflow.com/a/7520723/60488
//

#import &lt;Foundation/Foundation.h&gt;

@interface NSData (Hex)

- (NSString *)hexRepresentationWithSpaces:(BOOL)spaces capitals:(BOOL)capitals;

@end
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nil, Null, Empty Macros]]></title>
    <link href="http://koolistov.net/blog/2012/02/26/nil-null-empty-macros/"/>
    <updated>2012-02-26T23:48:00+08:00</updated>
    <id>http://koolistov.net/blog/2012/02/26/nil-null-empty-macros</id>
    <content type="html"><![CDATA[<p>Just a quick note to point out a gist I've made available a couple of days ago with three handy macros to deal with <code>nil</code>, <code>NSNull</code>, and empty strings (<code>@""</code>).</p>

<p>The first two are very handy when dealing with JSON dictionaries. The last one if you need to replace strings and want to avoid having <code>(null)</code> all over the place.</p>

<p><div><script src='https://gist.github.com/1874995.js?file='></script>
<noscript><pre><code>#define NILIFNULL(foo) ((foo == [NSNull null]) ? nil : foo)
#define NULLIFNIL(foo) ((foo == nil) ? [NSNull null] : (NSNull *)foo)
#define EMPTYIFNIL(foo) ((foo == nil) ? @&quot;&quot; : (NSString *)foo)</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Compiler Flags on Multiple Files]]></title>
    <link href="http://koolistov.net/blog/2012/02/26/setting-compiler-flags-on-multiple-files/"/>
    <updated>2012-02-26T21:37:00+08:00</updated>
    <id>http://koolistov.net/blog/2012/02/26/setting-compiler-flags-on-multiple-files</id>
    <content type="html"><![CDATA[<p>This snippet of golden Xcode knowledge was tweeted by colleague <a href="http://twitter.com/thijsdamen/">Thijs Damen</a> last Friday:</p>

<p><blockquote><p>"Selecting multiple files under 'Build Phases' and pressing enter sets multiple compiler flags at once. Timesaver! #ios"</p></blockquote></p>

<p>Xcode lets you set compiler flags per file in the 'Compile Sources' build phase. A very common need these days it so have to set <code>-fno-objc-arc</code> when code is not yet readied for ARC. More often than not this involves a bunch of files. Repeating the process of setting this flag for a bunch of files gets old really quick.</p>

<!-- more -->


<p>So here is what you do:</p>

<ol>
<li>Select the files in the 'Compile Sources' build phase</li>
<li>Press enter</li>
<li>Enter the compiler flags in the popup</li>
<li>Press done</li>
</ol>


<p>As I said: golden!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dismissing Modal View Controller Advice]]></title>
    <link href="http://koolistov.net/blog/2012/02/26/dismissing-modal-view-controller-advice/"/>
    <updated>2012-02-26T21:00:00+08:00</updated>
    <id>http://koolistov.net/blog/2012/02/26/dismissing-modal-view-controller-advice</id>
    <content type="html"><![CDATA[<p>Earlier today <a href="http://twitter.com/mugunthkumar/">Mugunth Kumar</a> blogged about <a href="http://blog.mugunthkumar.com/articles/ownership-of-presented-view-controllers-with-and-without-arc/">some advice about dismissing modal view controllers</a> to further explain his tweets from Saturday:</p>

<p><blockquote><p>"The controller that presents a modal controller should dismiss it. Don't do [self dismissModalViewControllerAnimated:NO] in the child."</p></blockquote></p>

<p>and:</p>

<p><blockquote><p>"Calling [self dismissModalViewControllerAnimated:NO] on child is like committing seppuku. A child shouldn't kill itself."</p></blockquote></p>

<p>He does have a good point saying the presenting view controller should also be the one deciding when the modal view controller should disappear. However, it is not too far fetched to say that the modal view controller itself can determine best when its time has come.</p>

<!--more-->


<p>I am uncertain wether we can deduct from Apple's sample code and/or API which approach they recommend. Even if all sample code lets the presenting view controller decide (I haven't checked this), the API clearly allows the modal view controller to dismiss itself.</p>

<p>My biggest objection though arises as he next attempts to explain that under ARC it is not possible to have proper memory management simultaneously with letting the modal view controller dismiss itself. This is just false.</p>

<p>In his non-ARC examples in both cases he retains the modal view controller before presenting it. This may be useful on occasion, but there is no need for it. The modal view controller is namely already retained when the <code>-[presentModalViewController:animated:]</code> method gets called. It is perfectly valid to pass an autoreleased view controller to that method. That would also avoid the ugly memory management that he uses in his second method. (There is BTW also a memory leak when he assigns the modal view controller to its property.) On <code>-[dismissModalViewControllerAnimated:]</code> the modal view controller gets released again.</p>

<p>There is nothing in this that changes under ARC vs. non-ARC. In both cases this works fine, wether you let the presenting or the modal view controller dismiss doesn't matter. So this only leaves the 'purity' of which way is cleaner. That is a debatable issue.</p>

<p>So, I'd conclude, feel free to do it in the way that makes sense to you. Keep an eye on your memory management, also with ARC, but either way can work.</p>

<p><strong>Update:</strong> <a href="http://twitter.com/mugunthkumar/">Mugunth Kumar</a>:</p>

<p><blockquote><p>"@johankool Good, but you still haven't shown a ARC example."</p></blockquote></p>

<p>Okay, fair enough. The below is a sample of how I would do this with ARC. As I said, there doesn't really change anything in ARC vs. non-ARC.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Presenting View Controller  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">showModalViewController</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">SomeViewController</span> <span class="o">*</span><span class="n">someViewController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SomeViewController</span><span class="p">]</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithNibName:</span><span class="s">@&quot;SomeViewController&quot;</span> <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Note: under non-ARC I would call autorelease on someViewController</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">DELEGATE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">someViewController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">elif</span> <span class="n">COMPLETION_BLOCK</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">someViewController</span><span class="p">.</span><span class="n">completionBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">NSUInteger</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">result</span> <span class="o">=</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Note: there isn&#39;t really any need to reference someViewController in this block</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span> <span class="nl">presentModalViewController:</span><span class="n">someViewController</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">DELEGATE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">someViewController:</span><span class="p">(</span><span class="n">SomeViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">controller</span> <span class="nl">pickedResult:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">result</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">result</span> <span class="o">=</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Modal View Controller  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">pickedResult:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">result</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">DELEGATE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">delegate</span> <span class="nl">someViewController:</span><span class="n">self</span> <span class="nl">pickedResult:</span><span class="n">result</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">elif</span> <span class="n">COMPLETION_BLOCK</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">completionBlock</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">completionBlock</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span> <span class="nl">dismissModalViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Right Path to URL Parameters]]></title>
    <link href="http://koolistov.net/blog/2011/10/02/right-path-to-url-parameters/"/>
    <updated>2011-10-02T00:40:00+08:00</updated>
    <id>http://koolistov.net/blog/2011/10/02/right-path-to-url-parameters</id>
    <content type="html"><![CDATA[<p>It is very common to have to construct URLs in iOS apps. Unfortunately there is no such things as <code>NSMutableURL</code>, so we need to come up with our own solution. Most developers seem to take a very pragmatic approach to this. Basically, you take a base URL, append a path and/or parameters to it, and go about your business. Almost, if not all, code I have seen do this make assumptions about the base URL: for example, no query or fragment present in the URL. Sometimes even relying on the other parts of the app always providing text that is safe to use in an URL. It can be quite a safe assumption that this is safe within your app, but I wanted a solution that is safe to use no matter what the base URL looked like, or what text was provided for the parameters.</p>

<!--more-->


<h3>URL Building Blocks</h3>

<p>Let's have a quick look at how a URL is constructed. The various parts of an URL are:</p>

<pre><code>scheme://username:password@domain:port/path?query#fragment
</code></pre>

<p>The pragmatic approach works well if the base URL does not contain a path, query and fragment. The presence of a path is usually not a problem, it gets trickier when a query is already present, and most solutions definitely fail when a fragment is present.</p>

<p>The code provided below takes the presence of path, query and/or fragment into account. Don't just take my word for it, you can run the provided unit test to ensure it does it right.</p>

<h3>Path</h3>

<p>To replace a path complete, use <code>- (NSURL *)URLByReplacingPathWithPath:(NSString *)path</code>. Alternatively, use <code>- (NSURL *)URLByAppendingPathWithRelativePath:(NSString *)path</code> if you want to append a relative path. This also allows to you walk up the path using for example <code>../foo</code>. The path will get simplified if possible.</p>

<h3>Parameter</h3>

<p>The most effective way to add parameters is to use <code>- (NSURL *)URLByAppendingParameters:(NSDictionary *)parameters</code>. The dictionary is expected to contain <code>NSString</code>s as keys. The corresponding values may be either <code>NSString</code>s or should respond to the method <code>- (NSString *)stringValue</code>, otherwise the value will default to  <code>- (NSString *)description</code>. Both keys and values will get URL escaped.</p>

<p>It is valid in an URL to have a parameter name appear multiple times, unlike it is for keys in <code>NSDictionary</code>. You can work around this by calling the method <code>- (NSURL *)URLByAppendingParameterName:(NSString *)parameter value:(id)value</code> multiple times with the same parameter name.</p>

<h3>Code</h3>

<p>The code is available as a <a href="https://gist.github.com/1256354">gist on GitHub</a>. The license for the code is a simple BSD license. You don't need to attribute me or Koolistov in your app (although appreciated if you do), but you need to leave the copyright notice intact on the source files.</p>

<p><div><script src='https://gist.github.com/1256354.js?file='></script>
<noscript><pre><code>//
//  NSURL+PathParameters.h
//
//  Created by Johan Kool on 27/9/2011.
//  Copyright 2011 Koolistov Pte. Ltd. All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without modification, are 
//  permitted provided that the following conditions are met:
//
//  * Redistributions of source code must retain the above copyright notice, this list of 
//    conditions and the following disclaimer.
//  * Neither the name of KOOLISTOV PTE. LTD. nor the names of its contributors may be used to 
//    endorse or promote products derived from this software without specific prior written 
//    permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY 
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
//  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
//  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
//  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
//  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//


#import &lt;Foundation/Foundation.h&gt;

@interface NSURL (PathParameters)

- (NSURL *)URLByReplacingPathWithPath:(NSString *)path;
- (NSURL *)URLByAppendingPathWithRelativePath:(NSString *)path;
- (NSURL *)URLByAppendingParameters:(NSDictionary *)parameters;
- (NSURL *)URLByAppendingParameterName:(NSString *)parameter value:(id)value;

@end
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
