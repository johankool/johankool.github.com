<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cocoa | Koolistov]]></title>
  <link href="http://koolistov.net/blog/categories/cocoa/atom.xml" rel="self"/>
  <link href="http://koolistov.net/"/>
  <updated>2012-11-13T00:19:10+08:00</updated>
  <id>http://koolistov.net/</id>
  <author>
    <name><![CDATA[Johan Kool]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[KVServerInteraction deprecated]]></title>
    <link href="http://koolistov.net/blog/2012/04/03/kvserverinteraction-deprecated/"/>
    <updated>2012-04-03T23:04:00+08:00</updated>
    <id>http://koolistov.net/blog/2012/04/03/kvserverinteraction-deprecated</id>
    <content type="html"><![CDATA[<p>As of today I am deprecating <a href="https://github.com/Koolistov/Server-Interaction">KVServerInteraction</a>. It has served its purpose as a generic network solution for a number of apps that I have worked on. However, it was a bit too simplistic in its approach.</p>

<p>My recommendation is to switch to <a href="https://github.com/MugunthKumar/MKNetworkKit">MKNetworkKit</a> by <a href="http://blog.mugunthkumar.com/">Mugunth Kumar</a>. It follows a very similar approach. It too has a central service controller (a.k.a. network engine) that performs the service requests (a.k.a. network operations).</p>

<!-- more -->


<p>Where MKNetworkKit shines is that is much further fleshed out. For example, it adjusts the number of active connections to match the current network condition. It comes with support for caching, as well as freezing active requests. The cURL-able debug lines are nice touch too. From what I have seen so far everything that KVServerInteraction could do, can be done with MKNetworkKit as well.</p>

<p>It is quite straightforward to convert your code from KVServerInteraction to MKNetworkKit. Below are two snippets that shows how a service request (a.k.a. network operation) is done. Both methods would live on your custom subclass of your service controller (a.k.a. network engine).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>KVServerInteractiom  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="n">KVServiceRequest</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nl">fetchGuestbookEntriesOnPage:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">pageIndex</span> <span class="nl">completionHandler:</span><span class="p">(</span><span class="n">KVRequestCompletionBlock</span><span class="p">)</span><span class="n">completionHandler</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSURL</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">URL</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">baseURL</span> <span class="nl">URLByAppendingPathWithRelativePath:</span><span class="s">@&quot;entries&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">URL</span> <span class="o">=</span> <span class="p">[</span><span class="n">URL</span> <span class="nl">URLByAppendingParameterName:</span><span class="s">@&quot;page&quot;</span> <span class="nl">value:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithUnsignedInteger:</span><span class="n">pageIndex</span><span class="p">]];</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">performRequestWithURL:</span><span class="n">URL</span> <span class="nl">HTTPMethod:</span><span class="s">@&quot;GET&quot;</span> <span class="nl">bodyData:</span><span class="nb">nil</span> <span class="nl">requiresToken:</span><span class="n">YES</span> <span class="nl">allowCaching:</span><span class="n">YES</span> <span class="nl">forceRefresh:</span><span class="n">NO</span> <span class="nl">completionHandler:</span><span class="n">completionHandler</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MKNetworkKit  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="n">MKNetworkOperation</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nl">fetchGuestbookEntriesOnPage:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">pageIndex</span> <span class="nl">completionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="p">)(</span><span class="kt">id</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="n">result</span><span class="p">))</span><span class="n">completionHandler</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSMutableDictionary</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableDictionary</span> <span class="nl">dictionaryWithObject:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithUnsignedInteger:</span><span class="n">pageIndex</span><span class="p">]</span> <span class="nl">forKey:</span><span class="s">@&quot;page&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">MKNetworkOperation</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">operation</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">operationWithPath:</span><span class="s">@&quot;entries&quot;</span> <span class="nl">params:</span><span class="n">params</span> <span class="nl">httpMethod:</span><span class="s">@&quot;GET&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">operation</span> <span class="nl">onCompletion:</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="p">(</span><span class="n">MKNetworkOperation</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">completedOperation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">completionHandler</span><span class="p">(</span><span class="n">completedOperation</span><span class="p">.</span><span class="n">responseJSON</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span> <span class="nl">onError:</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="p">(</span><span class="n">NSError</span><span class="o">&lt;/</span><span class="n">sup</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">completionHandler</span><span class="p">(</span><span class="nb">nil</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="nl">enqueueOperation:</span><span class="n">operation</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">operation</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hex Representation of NSData]]></title>
    <link href="http://koolistov.net/blog/2012/02/26/hex-representation-of-nsdata/"/>
    <updated>2012-02-26T23:55:00+08:00</updated>
    <id>http://koolistov.net/blog/2012/02/26/hex-representation-of-nsdata</id>
    <content type="html"><![CDATA[<p>And the last one for today, from bit longer ago, is a category on <code>NSData</code> to get its content as a hex representation. Optionally with spaces and/or capitals. This one is not mine, I only cleaned it up a little, but was <a href="http://stackoverflow.com/a/7520723/60488/">an answer by AliSoftware on Stackoverflow</a>.</p>

<!-- more -->


<p><div><script src='https://gist.github.com/1443455.js?file='></script>
<noscript><pre><code>//
//  NSData+Hex.h
//
//  Based on code by AliSoftware
//  http://stackoverflow.com/a/7520723/60488
//

#import &lt;Foundation/Foundation.h&gt;

@interface NSData (Hex)

- (NSString *)hexRepresentationWithSpaces:(BOOL)spaces capitals:(BOOL)capitals;

@end
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nil, Null, Empty Macros]]></title>
    <link href="http://koolistov.net/blog/2012/02/26/nil-null-empty-macros/"/>
    <updated>2012-02-26T23:48:00+08:00</updated>
    <id>http://koolistov.net/blog/2012/02/26/nil-null-empty-macros</id>
    <content type="html"><![CDATA[<p>Just a quick note to point out a gist I've made available a couple of days ago with three handy macros to deal with <code>nil</code>, <code>NSNull</code>, and empty strings (<code>@""</code>).</p>

<p>The first two are very handy when dealing with JSON dictionaries. The last one if you need to replace strings and want to avoid having <code>(null)</code> all over the place.</p>

<p><div><script src='https://gist.github.com/1874995.js?file='></script>
<noscript><pre><code>#define NILIFNULL(foo) ((foo == [NSNull null]) ? nil : foo)
#define NULLIFNIL(foo) ((foo == nil) ? [NSNull null] : (NSNull *)foo)
#define EMPTYIFNIL(foo) ((foo == nil) ? @&quot;&quot; : (NSString *)foo)</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Compiler Flags on Multiple Files]]></title>
    <link href="http://koolistov.net/blog/2012/02/26/setting-compiler-flags-on-multiple-files/"/>
    <updated>2012-02-26T21:37:00+08:00</updated>
    <id>http://koolistov.net/blog/2012/02/26/setting-compiler-flags-on-multiple-files</id>
    <content type="html"><![CDATA[<p>This snippet of golden Xcode knowledge was tweeted by colleague <a href="http://twitter.com/thijsdamen/">Thijs Damen</a> last Friday:</p>

<p><blockquote><p>"Selecting multiple files under 'Build Phases' and pressing enter sets multiple compiler flags at once. Timesaver! #ios"</p></blockquote></p>

<p>Xcode lets you set compiler flags per file in the 'Compile Sources' build phase. A very common need these days it so have to set <code>-fno-objc-arc</code> when code is not yet readied for ARC. More often than not this involves a bunch of files. Repeating the process of setting this flag for a bunch of files gets old really quick.</p>

<!-- more -->


<p>So here is what you do:</p>

<ol>
<li>Select the files in the 'Compile Sources' build phase</li>
<li>Press enter</li>
<li>Enter the compiler flags in the popup</li>
<li>Press done</li>
</ol>


<p>As I said: golden!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dismissing Modal View Controller Advice]]></title>
    <link href="http://koolistov.net/blog/2012/02/26/dismissing-modal-view-controller-advice/"/>
    <updated>2012-02-26T21:00:00+08:00</updated>
    <id>http://koolistov.net/blog/2012/02/26/dismissing-modal-view-controller-advice</id>
    <content type="html"><![CDATA[<p>Earlier today <a href="http://twitter.com/mugunthkumar/">Mugunth Kumar</a> blogged about <a href="http://blog.mugunthkumar.com/articles/ownership-of-presented-view-controllers-with-and-without-arc/">some advice about dismissing modal view controllers</a> to further explain his tweets from Saturday:</p>

<p><blockquote><p>"The controller that presents a modal controller should dismiss it. Don't do [self dismissModalViewControllerAnimated:NO] in the child."</p></blockquote></p>

<p>and:</p>

<p><blockquote><p>"Calling [self dismissModalViewControllerAnimated:NO] on child is like committing seppuku. A child shouldn't kill itself."</p></blockquote></p>

<p>He does have a good point saying the presenting view controller should also be the one deciding when the modal view controller should disappear. However, it is not too far fetched to say that the modal view controller itself can determine best when its time has come.</p>

<!--more-->


<p>I am uncertain wether we can deduct from Apple's sample code and/or API which approach they recommend. Even if all sample code lets the presenting view controller decide (I haven't checked this), the API clearly allows the modal view controller to dismiss itself.</p>

<p>My biggest objection though arises as he next attempts to explain that under ARC it is not possible to have proper memory management simultaneously with letting the modal view controller dismiss itself. This is just false.</p>

<p>In his non-ARC examples in both cases he retains the modal view controller before presenting it. This may be useful on occasion, but there is no need for it. The modal view controller is namely already retained when the <code>-[presentModalViewController:animated:]</code> method gets called. It is perfectly valid to pass an autoreleased view controller to that method. That would also avoid the ugly memory management that he uses in his second method. (There is BTW also a memory leak when he assigns the modal view controller to its property.) On <code>-[dismissModalViewControllerAnimated:]</code> the modal view controller gets released again.</p>

<p>There is nothing in this that changes under ARC vs. non-ARC. In both cases this works fine, wether you let the presenting or the modal view controller dismiss doesn't matter. So this only leaves the 'purity' of which way is cleaner. That is a debatable issue.</p>

<p>So, I'd conclude, feel free to do it in the way that makes sense to you. Keep an eye on your memory management, also with ARC, but either way can work.</p>

<p><strong>Update:</strong> <a href="http://twitter.com/mugunthkumar/">Mugunth Kumar</a>:</p>

<p><blockquote><p>"@johankool Good, but you still haven't shown a ARC example."</p></blockquote></p>

<p>Okay, fair enough. The below is a sample of how I would do this with ARC. As I said, there doesn't really change anything in ARC vs. non-ARC.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Presenting View Controller  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">showModalViewController</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">SomeViewController</span> <span class="o">*</span><span class="n">someViewController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SomeViewController</span><span class="p">]</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithNibName:</span><span class="s">@&quot;SomeViewController&quot;</span> <span class="nl">bundle:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Note: under non-ARC I would call autorelease on someViewController</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">DELEGATE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">someViewController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">elif</span> <span class="n">COMPLETION_BLOCK</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">someViewController</span><span class="p">.</span><span class="n">completionBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">NSUInteger</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">result</span> <span class="o">=</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Note: there isn&#39;t really any need to reference someViewController in this block</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span> <span class="nl">presentModalViewController:</span><span class="n">someViewController</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">DELEGATE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">someViewController:</span><span class="p">(</span><span class="n">SomeViewController</span> <span class="o">*</span><span class="p">)</span><span class="n">controller</span> <span class="nl">pickedResult:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">result</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">result</span> <span class="o">=</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Modal View Controller  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">pickedResult:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">result</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">DELEGATE</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">delegate</span> <span class="nl">someViewController:</span><span class="n">self</span> <span class="nl">pickedResult:</span><span class="n">result</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">elif</span> <span class="n">COMPLETION_BLOCK</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">completionBlock</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">completionBlock</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">self</span> <span class="nl">dismissModalViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
